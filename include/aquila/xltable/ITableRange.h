#pragma once
/**
 *=============================================================================
 * 2011/03/28
 * $Id$
 * Интерфейс области таблицы в соответствии с форматом XlTable
 *=============================================================================
 */

#include "aquila/core/IReferenceCounted.h"
#include "aquila/xltable/ICell.h"
#include "aquila/xltable/IDataStream.h"

using namespace aquila::core;

namespace aquila {
	namespace xltable {

		class ITableRange : public IReferenceCounted {
		public:
			virtual ~ITableRange(void) { }

			/**
			 * Получить строку темы
			 *
			 * Возвращает указатель на строку темы. Это значение
			 * соответствует первой строке (hsz1 - четвертый аргумент),
			 * переданной в функцию обработки DDE-транзакций.
			 */
			virtual const char* getTopic()=0;

			/**
			 * Получить строку пункта
			 *
			 * Возвращает указатель на строку пункта. Это значение
			 * соответствует второй строке (hsz2 - пятый аргумент),
			 * переданной в функцию обработки DDE-транзакций.
			 */
			virtual const char* getItem()=0;

			/**
			 * Получить количество строк
			 *
			 * Возвращает количество строк области таблицы.
			 */
			virtual int getRows()=0;

			/**
			 * Получить количество колонок
			 *
			 * Возвращает количество колонок области таблицы.
			 */
			virtual int getCols()=0;

			/**
			 * Получить ячейку таблицы
			 *
			 * Возвращает экземпляр ячейки области таблицы, расположенной
			 * в указанной строке и колонке. Строка и колонка указываются
			 * относительно области таблицы, а не всей таблицы. Вызов этого
			 * метода может окончиться возбуждением исключения
			 * ICellAggregatorException в случае, если ячайка с указанными
			 * координатами отсутствует. Координаты начинаются с нуля.
			 */
			virtual ICell* getCell(int row, int col)=0;

		};

	} // end namespace xltable
} // end namespace aquila