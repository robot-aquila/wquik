/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_jddesvrJNI = NULL;
    jmethodID director_methids[8];
  }
}

#include <string>


#include "aquila/jddesvr/Cell.h"
#include "aquila/jddesvr/Table.h"
#include "aquila/jddesvr/ServiceHandler.h"
#include "aquila/jddesvr/Server.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "jddesvr_wrap.h"

SwigDirector_ServiceHandler::SwigDirector_ServiceHandler(JNIEnv *jenv, std::string serviceName) : aquila::jddesvr::ServiceHandler(serviceName), Swig::Director(jenv) {
}

SwigDirector_ServiceHandler::~SwigDirector_ServiceHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


std::string SwigDirector_ServiceHandler::getName() {
  std::string c_result ;
  jstring jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    return aquila::jddesvr::ServiceHandler::getName();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jstring) jenv->CallStaticObjectMethod(Swig::jclass_jddesvrJNI, Swig::director_methids[0], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    if(!jresult) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
      return c_result;
    } 
    const char *c_result_pstr = (const char *)jenv->GetStringUTFChars(jresult, 0); 
    if (!c_result_pstr) return c_result;
    c_result.assign(c_result_pstr);
    jenv->ReleaseStringUTFChars(jresult, c_result_pstr); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ServiceHandler::onConnect(std::string topic) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jtopic  ;
  
  if (!swig_override[1]) {
    return aquila::jddesvr::ServiceHandler::onConnect(topic);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // BEG typemap(directorin,descriptor="Ljava/lang/String;") std::string
    size_t topic_len = (&topic)->length();
    wchar_t *topic_dst = new wchar_t[topic_len];
    MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&topic)->c_str(), topic_len, topic_dst, topic_len);
    jtopic = jenv->NewString((jchar*)topic_dst, topic_len);
    delete [] topic_dst;
    // END typemap(directorin,descriptor="Ljava/lang/String;") std::string 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_jddesvrJNI, Swig::director_methids[1], swigjobj, jtopic);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ServiceHandler::onConnectConfirm(std::string topic) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jtopic  ;
  
  if (!swig_override[2]) {
    aquila::jddesvr::ServiceHandler::onConnectConfirm(topic);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // BEG typemap(directorin,descriptor="Ljava/lang/String;") std::string
    size_t topic_len = (&topic)->length();
    wchar_t *topic_dst = new wchar_t[topic_len];
    MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&topic)->c_str(), topic_len, topic_dst, topic_len);
    jtopic = jenv->NewString((jchar*)topic_dst, topic_len);
    delete [] topic_dst;
    // END typemap(directorin,descriptor="Ljava/lang/String;") std::string 
    jenv->CallStaticVoidMethod(Swig::jclass_jddesvrJNI, Swig::director_methids[2], swigjobj, jtopic);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ServiceHandler::onRawData(std::string topic, std::string item, char *dataBuffer, int size) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jtopic  ;
  jstring jitem  ;
  jbyteArray jdataBuffer = 0 ;
  
  if (!swig_override[3]) {
    return aquila::jddesvr::ServiceHandler::onRawData(topic,item,dataBuffer,size);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // BEG typemap(directorin,descriptor="Ljava/lang/String;") std::string
    size_t topic_len = (&topic)->length();
    wchar_t *topic_dst = new wchar_t[topic_len];
    MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&topic)->c_str(), topic_len, topic_dst, topic_len);
    jtopic = jenv->NewString((jchar*)topic_dst, topic_len);
    delete [] topic_dst;
    // END typemap(directorin,descriptor="Ljava/lang/String;") std::string 
    // BEG typemap(directorin,descriptor="Ljava/lang/String;") std::string
    size_t item_len = (&item)->length();
    wchar_t *item_dst = new wchar_t[item_len];
    MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&item)->c_str(), item_len, item_dst, item_len);
    jitem = jenv->NewString((jchar*)item_dst, item_len);
    delete [] item_dst;
    // END typemap(directorin,descriptor="Ljava/lang/String;") std::string 
    {
      jdataBuffer = (jenv)->NewByteArray(size); 
      (jenv)->SetByteArrayRegion(jdataBuffer, 0, size, (jbyte*)dataBuffer); 
    }
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_jddesvrJNI, Swig::director_methids[3], swigjobj, jtopic, jitem, jdataBuffer);
    if (jenv->ExceptionCheck() == JNI_TRUE) return c_result;
    c_result = jresult ? true : false; 
    (jenv)->GetByteArrayRegion(jdataBuffer, 0, size, (jbyte *)dataBuffer); 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ServiceHandler::onData(aquila::jddesvr::Table *table) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jtable = 0 ;
  
  if (!swig_override[4]) {
    aquila::jddesvr::ServiceHandler::onData(table);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((aquila::jddesvr::Table **)&jtable) = (aquila::jddesvr::Table *) table; 
    jenv->CallStaticVoidMethod(Swig::jclass_jddesvrJNI, Swig::director_methids[4], swigjobj, jtable);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ServiceHandler::onDisconnect(std::string topic) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jtopic  ;
  
  if (!swig_override[5]) {
    aquila::jddesvr::ServiceHandler::onDisconnect(topic);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    // BEG typemap(directorin,descriptor="Ljava/lang/String;") std::string
    size_t topic_len = (&topic)->length();
    wchar_t *topic_dst = new wchar_t[topic_len];
    MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&topic)->c_str(), topic_len, topic_dst, topic_len);
    jtopic = jenv->NewString((jchar*)topic_dst, topic_len);
    delete [] topic_dst;
    // END typemap(directorin,descriptor="Ljava/lang/String;") std::string 
    jenv->CallStaticVoidMethod(Swig::jclass_jddesvrJNI, Swig::director_methids[5], swigjobj, jtopic);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ServiceHandler::onRegister() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[6]) {
    aquila::jddesvr::ServiceHandler::onRegister();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_jddesvrJNI, Swig::director_methids[6], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ServiceHandler::onUnregister() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[7]) {
    aquila::jddesvr::ServiceHandler::onUnregister();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_jddesvrJNI, Swig::director_methids[7], swigjobj);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ServiceHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "getName", "()Ljava/lang/String;", NULL 
    },
    {
      "onConnect", "(Ljava/lang/String;)Z", NULL 
    },
    {
      "onConnectConfirm", "(Ljava/lang/String;)V", NULL 
    },
    {
      "onRawData", "(Ljava/lang/String;Ljava/lang/String;[B)Z", NULL 
    },
    {
      "onData", "(Lru/prolib/aquila/jddesvr/Table;)V", NULL 
    },
    {
      "onDisconnect", "(Ljava/lang/String;)V", NULL 
    },
    {
      "onRegister", "()V", NULL 
    },
    {
      "onUnregister", "()V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("ru/prolib/aquila/jddesvr/ServiceHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 8; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_new_1Cell(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  aquila::xltable::ICell *arg1 = (aquila::xltable::ICell *) 0 ;
  aquila::jddesvr::Cell *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(aquila::xltable::ICell **)&jarg1; 
  result = (aquila::jddesvr::Cell *)new aquila::jddesvr::Cell(arg1);
  *(aquila::jddesvr::Cell **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_delete_1Cell(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  aquila::jddesvr::Cell *arg1 = (aquila::jddesvr::Cell *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(aquila::jddesvr::Cell **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Cell_1isFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  aquila::jddesvr::Cell *arg1 = (aquila::jddesvr::Cell *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Cell **)&jarg1; 
  result = (bool)(arg1)->isFloat();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Cell_1isBoolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  aquila::jddesvr::Cell *arg1 = (aquila::jddesvr::Cell *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Cell **)&jarg1; 
  result = (bool)(arg1)->isBoolean();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Cell_1isString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  aquila::jddesvr::Cell *arg1 = (aquila::jddesvr::Cell *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Cell **)&jarg1; 
  result = (bool)(arg1)->isString();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Cell_1isInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  aquila::jddesvr::Cell *arg1 = (aquila::jddesvr::Cell *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Cell **)&jarg1; 
  result = (bool)(arg1)->isInteger();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Cell_1isError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  aquila::jddesvr::Cell *arg1 = (aquila::jddesvr::Cell *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Cell **)&jarg1; 
  result = (bool)(arg1)->isError();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Cell_1isBlank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  aquila::jddesvr::Cell *arg1 = (aquila::jddesvr::Cell *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Cell **)&jarg1; 
  result = (bool)(arg1)->isBlank();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Cell_1isSkip(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  aquila::jddesvr::Cell *arg1 = (aquila::jddesvr::Cell *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Cell **)&jarg1; 
  result = (bool)(arg1)->isSkip();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Cell_1asFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  aquila::jddesvr::Cell *arg1 = (aquila::jddesvr::Cell *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Cell **)&jarg1; 
  result = (double)(arg1)->asFloat();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Cell_1asBoolean(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  aquila::jddesvr::Cell *arg1 = (aquila::jddesvr::Cell *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Cell **)&jarg1; 
  result = (bool)(arg1)->asBoolean();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Cell_1asString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  aquila::jddesvr::Cell *arg1 = (aquila::jddesvr::Cell *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Cell **)&jarg1; 
  result = (arg1)->asString();
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Cell_1asInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  aquila::jddesvr::Cell *arg1 = (aquila::jddesvr::Cell *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Cell **)&jarg1; 
  result = (int)(arg1)->asInteger();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_new_1Table(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  aquila::xltable::ITableRange *arg1 = (aquila::xltable::ITableRange *) 0 ;
  aquila::jddesvr::Table *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(aquila::xltable::ITableRange **)&jarg1; 
  result = (aquila::jddesvr::Table *)new aquila::jddesvr::Table(arg1);
  *(aquila::jddesvr::Table **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_delete_1Table(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  aquila::jddesvr::Table *arg1 = (aquila::jddesvr::Table *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(aquila::jddesvr::Table **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Table_1makeCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  aquila::jddesvr::Table *arg1 = (aquila::jddesvr::Table *) 0 ;
  aquila::jddesvr::Table *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Table **)&jarg1; 
  result = (aquila::jddesvr::Table *)(arg1)->makeCopy();
  *(aquila::jddesvr::Table **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Table_1getTopic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  aquila::jddesvr::Table *arg1 = (aquila::jddesvr::Table *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Table **)&jarg1; 
  result = (arg1)->getTopic();
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Table_1getItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  aquila::jddesvr::Table *arg1 = (aquila::jddesvr::Table *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Table **)&jarg1; 
  result = (arg1)->getItem();
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Table_1getRows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  aquila::jddesvr::Table *arg1 = (aquila::jddesvr::Table *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Table **)&jarg1; 
  result = (int)(arg1)->getRows();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Table_1getCols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  aquila::jddesvr::Table *arg1 = (aquila::jddesvr::Table *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Table **)&jarg1; 
  result = (int)(arg1)->getCols();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Table_1getCell(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  aquila::jddesvr::Table *arg1 = (aquila::jddesvr::Table *) 0 ;
  int arg2 ;
  int arg3 ;
  SwigValueWrapper< aquila::jddesvr::Cell > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Table **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (arg1)->getCell(arg2,arg3);
  }
  catch(exception &_e) {
    {
      jclass exClass = jenv->FindClass("java/lang/Exception");
      if (exClass)
      jenv->ThrowNew(exClass, (&_e)->what());
      return 0;
    }
  }
  
  *(aquila::jddesvr::Cell **)&jresult = new aquila::jddesvr::Cell((const aquila::jddesvr::Cell &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_new_1ServiceHandler(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  aquila::jddesvr::ServiceHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (aquila::jddesvr::ServiceHandler *)new SwigDirector_ServiceHandler(jenv,arg1);
  *(aquila::jddesvr::ServiceHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_delete_1ServiceHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  result = (arg1)->getName();
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1getNameSwigExplicitServiceHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  result = (arg1)->aquila::jddesvr::ServiceHandler::getName();
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1onConnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->onConnect(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1onConnectSwigExplicitServiceHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  std::string arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)(arg1)->aquila::jddesvr::ServiceHandler::onConnect(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1onConnectConfirm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->onConnectConfirm(arg2);
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1onConnectConfirmSwigExplicitServiceHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->aquila::jddesvr::ServiceHandler::onConnectConfirm(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1onRawData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jbyteArray jarg4) {
  jboolean jresult = 0 ;
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    if (jarg4) {
      arg4 = (char *) jenv->GetByteArrayElements(jarg4, 0);
      arg5 = (size_t) jenv->GetArrayLength(jarg4);
    } else {
      arg4 = 0;
      arg5 = 0;
    }
  }
  result = (bool)(arg1)->onRawData(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  {
    if (jarg4) jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, 0);
  }
  
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1onRawDataSwigExplicitServiceHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jbyteArray jarg4) {
  jboolean jresult = 0 ;
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    if (jarg4) {
      arg4 = (char *) jenv->GetByteArrayElements(jarg4, 0);
      arg5 = (size_t) jenv->GetArrayLength(jarg4);
    } else {
      arg4 = 0;
      arg5 = 0;
    }
  }
  result = (bool)(arg1)->aquila::jddesvr::ServiceHandler::onRawData(arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  {
    if (jarg4) jenv->ReleaseByteArrayElements(jarg4, (jbyte *)arg4, 0);
  }
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1onData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  aquila::jddesvr::Table *arg2 = (aquila::jddesvr::Table *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  arg2 = *(aquila::jddesvr::Table **)&jarg2; 
  (arg1)->onData(arg2);
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1onDataSwigExplicitServiceHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  aquila::jddesvr::Table *arg2 = (aquila::jddesvr::Table *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  arg2 = *(aquila::jddesvr::Table **)&jarg2; 
  (arg1)->aquila::jddesvr::ServiceHandler::onData(arg2);
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1onDisconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->onDisconnect(arg2);
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1onDisconnectSwigExplicitServiceHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->aquila::jddesvr::ServiceHandler::onDisconnect(arg2);
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1onRegister(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  (arg1)->onRegister();
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1onRegisterSwigExplicitServiceHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  (arg1)->aquila::jddesvr::ServiceHandler::onRegister();
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1onUnregister(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  (arg1)->onUnregister();
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1onUnregisterSwigExplicitServiceHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  aquila::jddesvr::ServiceHandler *arg1 = (aquila::jddesvr::ServiceHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::ServiceHandler **)&jarg1; 
  (arg1)->aquila::jddesvr::ServiceHandler::onUnregister();
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  aquila::jddesvr::ServiceHandler *obj = *((aquila::jddesvr::ServiceHandler **)&objarg);
  (void)jcls;
  SwigDirector_ServiceHandler *director = dynamic_cast<SwigDirector_ServiceHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_ServiceHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  aquila::jddesvr::ServiceHandler *obj = *((aquila::jddesvr::ServiceHandler **)&objarg);
  SwigDirector_ServiceHandler *director = dynamic_cast<SwigDirector_ServiceHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_new_1Server(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  aquila::jddesvr::Server *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (aquila::jddesvr::Server *)new aquila::jddesvr::Server();
  *(aquila::jddesvr::Server **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_delete_1Server(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  aquila::jddesvr::Server *arg1 = (aquila::jddesvr::Server *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(aquila::jddesvr::Server **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Server_1start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  aquila::jddesvr::Server *arg1 = (aquila::jddesvr::Server *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Server **)&jarg1; 
  try {
    (arg1)->start();
  }
  catch(std::exception &_e) {
    {
      jclass exClass = jenv->FindClass("java/lang/Exception");
      if (exClass)
      jenv->ThrowNew(exClass, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Server_1stop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  aquila::jddesvr::Server *arg1 = (aquila::jddesvr::Server *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Server **)&jarg1; 
  try {
    (arg1)->stop();
  }
  catch(std::exception &_e) {
    {
      jclass exClass = jenv->FindClass("java/lang/Exception");
      if (exClass)
      jenv->ThrowNew(exClass, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Server_1join(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  aquila::jddesvr::Server *arg1 = (aquila::jddesvr::Server *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jddesvr::Server **)&jarg1; 
  try {
    (arg1)->join();
  }
  catch(std::exception &_e) {
    {
      jclass exClass = jenv->FindClass("java/lang/Exception");
      if (exClass)
      jenv->ThrowNew(exClass, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Server_1registerService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  aquila::jddesvr::Server *arg1 = (aquila::jddesvr::Server *) 0 ;
  aquila::jddesvr::ServiceHandler *arg2 = (aquila::jddesvr::ServiceHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(aquila::jddesvr::Server **)&jarg1; 
  arg2 = *(aquila::jddesvr::ServiceHandler **)&jarg2; 
  try {
    (arg1)->registerService(arg2);
  }
  catch(exception &_e) {
    {
      jclass exClass = jenv->FindClass("java/lang/Exception");
      if (exClass)
      jenv->ThrowNew(exClass, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_Server_1unregisterService(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  aquila::jddesvr::Server *arg1 = (aquila::jddesvr::Server *) 0 ;
  aquila::jddesvr::ServiceHandler *arg2 = (aquila::jddesvr::ServiceHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(aquila::jddesvr::Server **)&jarg1; 
  arg2 = *(aquila::jddesvr::ServiceHandler **)&jarg2; 
  try {
    (arg1)->unregisterService(arg2);
  }
  catch(exception &_e) {
    {
      jclass exClass = jenv->FindClass("java/lang/Exception");
      if (exClass)
      jenv->ThrowNew(exClass, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_jddesvr_jddesvrJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[8] = {
    {
      "SwigDirector_ServiceHandler_getName", "(Lru/prolib/aquila/jddesvr/ServiceHandler;)Ljava/lang/String;" 
    },
    {
      "SwigDirector_ServiceHandler_onConnect", "(Lru/prolib/aquila/jddesvr/ServiceHandler;Ljava/lang/String;)Z" 
    },
    {
      "SwigDirector_ServiceHandler_onConnectConfirm", "(Lru/prolib/aquila/jddesvr/ServiceHandler;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ServiceHandler_onRawData", "(Lru/prolib/aquila/jddesvr/ServiceHandler;Ljava/lang/String;Ljava/lang/String;[B)Z" 
    },
    {
      "SwigDirector_ServiceHandler_onData", "(Lru/prolib/aquila/jddesvr/ServiceHandler;J)V" 
    },
    {
      "SwigDirector_ServiceHandler_onDisconnect", "(Lru/prolib/aquila/jddesvr/ServiceHandler;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ServiceHandler_onRegister", "(Lru/prolib/aquila/jddesvr/ServiceHandler;)V" 
    },
    {
      "SwigDirector_ServiceHandler_onUnregister", "(Lru/prolib/aquila/jddesvr/ServiceHandler;)V" 
    }
  };
  Swig::jclass_jddesvrJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_jddesvrJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

