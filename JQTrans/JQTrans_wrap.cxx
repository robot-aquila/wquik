/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_JQTransJNI = NULL;
    jmethodID director_methids[4];
  }
}

#include <string>


#include "aquila/qtrans/QTransStruct.h"
#include "aquila/jqtrans/JQTransHandler.h"
#include "aquila/jqtrans/JQTransServer.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "JQTrans_wrap.h"

SwigDirector_JQTransHandler::SwigDirector_JQTransHandler(JNIEnv *jenv) : aquila::jqtrans::JQTransHandler(), Swig::Director(jenv) {
}

SwigDirector_JQTransHandler::~SwigDirector_JQTransHandler() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_JQTransHandler::OnConnectionStatus(long connEvent, long errCode, std::string errMsg) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jconnEvent  ;
  jint jerrCode  ;
  jstring jerrMsg  ;
  
  if (!swig_override[0]) {
    aquila::jqtrans::JQTransHandler::OnConnectionStatus(connEvent,errCode,errMsg);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jconnEvent = (jint) connEvent;
    jerrCode = (jint) errCode;
    // BEG typemap(directorin,descriptor="Ljava/lang/String;") std::string
    size_t errMsg_len = (&errMsg)->length();
    wchar_t *errMsg_dst = new wchar_t[errMsg_len];
    MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&errMsg)->c_str(), errMsg_len, errMsg_dst, errMsg_len);
    jerrMsg = jenv->NewString((jchar*)errMsg_dst, errMsg_len);
    delete [] errMsg_dst;
    // END typemap(directorin,descriptor="Ljava/lang/String;") std::string 
    jenv->CallStaticVoidMethod(Swig::jclass_JQTransJNI, Swig::director_methids[0], swigjobj, jconnEvent, jerrCode, jerrMsg);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JQTransHandler::OnTransactionReply(long resultCode, long errCode, long replyCode, unsigned long transId, long long orderId, std::string replyMsg) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jresultCode  ;
  jint jerrCode  ;
  jint jreplyCode  ;
  jlong jtransId  ;
  jlong jorderId  ;
  jstring jreplyMsg  ;
  
  if (!swig_override[1]) {
    aquila::jqtrans::JQTransHandler::OnTransactionReply(resultCode,errCode,replyCode,transId,orderId,replyMsg);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresultCode = (jint) resultCode;
    jerrCode = (jint) errCode;
    jreplyCode = (jint) replyCode;
    jtransId = (jlong) transId;
    jorderId = (jlong) orderId;
    // BEG typemap(directorin,descriptor="Ljava/lang/String;") std::string
    size_t replyMsg_len = (&replyMsg)->length();
    wchar_t *replyMsg_dst = new wchar_t[replyMsg_len];
    MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&replyMsg)->c_str(), replyMsg_len, replyMsg_dst, replyMsg_len);
    jreplyMsg = jenv->NewString((jchar*)replyMsg_dst, replyMsg_len);
    delete [] replyMsg_dst;
    // END typemap(directorin,descriptor="Ljava/lang/String;") std::string 
    jenv->CallStaticVoidMethod(Swig::jclass_JQTransJNI, Swig::director_methids[1], swigjobj, jresultCode, jerrCode, jreplyCode, jtransId, jorderId, jreplyMsg);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JQTransHandler::OnOrderStatus(QTransOrderStatus &status) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstatus = 0 ;
  
  if (!swig_override[2]) {
    aquila::jqtrans::JQTransHandler::OnOrderStatus(status);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(QTransOrderStatus **)&jstatus = (QTransOrderStatus *) &status; 
    jenv->CallStaticVoidMethod(Swig::jclass_JQTransJNI, Swig::director_methids[2], swigjobj, jstatus);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JQTransHandler::OnTradeStatus(QTransTradeStatus &status) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jstatus = 0 ;
  
  if (!swig_override[3]) {
    aquila::jqtrans::JQTransHandler::OnTradeStatus(status);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(QTransTradeStatus **)&jstatus = (QTransTradeStatus *) &status; 
    jenv->CallStaticVoidMethod(Swig::jclass_JQTransJNI, Swig::director_methids[3], swigjobj, jstatus);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_JQTransHandler::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "OnConnectionStatus", "(IILjava/lang/String;)V", NULL 
    },
    {
      "OnTransactionReply", "(IIIJJLjava/lang/String;)V", NULL 
    },
    {
      "OnOrderStatus", "(Lru/prolib/aquila/JQTrans/QTransOrderStatus;)V", NULL 
    },
    {
      "OnTradeStatus", "(Lru/prolib/aquila/JQTrans/QTransTradeStatus;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("ru/prolib/aquila/JQTrans/JQTransHandler");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 4; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT jint JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  result = (long) ((arg1)->mode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1transId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->transId = arg2;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1transId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  result = (unsigned long) ((arg1)->transId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1orderId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->orderId = arg2;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1orderId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  result = (long long) ((arg1)->orderId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1classCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->classCode = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1classCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  result = (std::string *) & ((arg1)->classCode);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1secCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->secCode = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1secCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  result = (std::string *) & ((arg1)->secCode);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1price_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->price = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1price_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  result = (double) ((arg1)->price);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1balance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->balance = arg2;
}


SWIGEXPORT jint JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1balance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  result = (long) ((arg1)->balance);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  result = (double) ((arg1)->value);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1isSell_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSell = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1isSell_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  result = (bool) ((arg1)->isSell);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT jint JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  result = (long) ((arg1)->status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1orderDescriptor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->orderDescriptor = arg2;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransOrderStatus_1orderDescriptor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  result = (unsigned long) ((arg1)->orderDescriptor);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_new_1QTransOrderStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  QTransOrderStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (QTransOrderStatus *)new QTransOrderStatus();
  *(QTransOrderStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_delete_1QTransOrderStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  QTransOrderStatus *arg1 = (QTransOrderStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QTransOrderStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT jint JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  result = (long) ((arg1)->mode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  result = (long long) ((arg1)->id);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1orderId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  long long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  arg2 = (long long)jarg2; 
  if (arg1) (arg1)->orderId = arg2;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1orderId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  result = (long long) ((arg1)->orderId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1classCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->classCode = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1classCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  result = (std::string *) & ((arg1)->classCode);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1secCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->secCode = *arg2;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1secCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  result = (std::string *) & ((arg1)->secCode);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1price_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->price = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1price_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  result = (double) ((arg1)->price);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1qty_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->qty = arg2;
}


SWIGEXPORT jint JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1qty_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  result = (long) ((arg1)->qty);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  result = (double) ((arg1)->value);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1isSell_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isSell = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1isSell_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  result = (bool) ((arg1)->isSell);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1tradeDescriptor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  unsigned long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->tradeDescriptor = arg2;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_QTransTradeStatus_1tradeDescriptor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  result = (unsigned long) ((arg1)->tradeDescriptor);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_new_1QTransTradeStatus(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  QTransTradeStatus *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (QTransTradeStatus *)new QTransTradeStatus();
  *(QTransTradeStatus **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_delete_1QTransTradeStatus(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  QTransTradeStatus *arg1 = (QTransTradeStatus *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(QTransTradeStatus **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_new_1JQTransHandler(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  aquila::jqtrans::JQTransHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (aquila::jqtrans::JQTransHandler *)new SwigDirector_JQTransHandler(jenv);
  *(aquila::jqtrans::JQTransHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_delete_1JQTransHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  aquila::jqtrans::JQTransHandler *arg1 = (aquila::jqtrans::JQTransHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(aquila::jqtrans::JQTransHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransHandler_1OnConnectionStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4) {
  aquila::jqtrans::JQTransHandler *arg1 = (aquila::jqtrans::JQTransHandler *) 0 ;
  long arg2 ;
  long arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransHandler **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->OnConnectionStatus(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransHandler_1OnConnectionStatusSwigExplicitJQTransHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4) {
  aquila::jqtrans::JQTransHandler *arg1 = (aquila::jqtrans::JQTransHandler *) 0 ;
  long arg2 ;
  long arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransHandler **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->aquila::jqtrans::JQTransHandler::OnConnectionStatus(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransHandler_1OnTransactionReply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jstring jarg7) {
  aquila::jqtrans::JQTransHandler *arg1 = (aquila::jqtrans::JQTransHandler *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  unsigned long arg5 ;
  long long arg6 ;
  std::string arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransHandler **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = (unsigned long)jarg5; 
  arg6 = (long long)jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  (arg1)->OnTransactionReply(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransHandler_1OnTransactionReplySwigExplicitJQTransHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jlong jarg5, jlong jarg6, jstring jarg7) {
  aquila::jqtrans::JQTransHandler *arg1 = (aquila::jqtrans::JQTransHandler *) 0 ;
  long arg2 ;
  long arg3 ;
  long arg4 ;
  unsigned long arg5 ;
  long long arg6 ;
  std::string arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransHandler **)&jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  arg4 = (long)jarg4; 
  arg5 = (unsigned long)jarg5; 
  arg6 = (long long)jarg6; 
  if(!jarg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg7_pstr = (const char *)jenv->GetStringUTFChars(jarg7, 0); 
  if (!arg7_pstr) return ;
  (&arg7)->assign(arg7_pstr);
  jenv->ReleaseStringUTFChars(jarg7, arg7_pstr); 
  (arg1)->aquila::jqtrans::JQTransHandler::OnTransactionReply(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransHandler_1OnOrderStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  aquila::jqtrans::JQTransHandler *arg1 = (aquila::jqtrans::JQTransHandler *) 0 ;
  QTransOrderStatus *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(aquila::jqtrans::JQTransHandler **)&jarg1; 
  arg2 = *(QTransOrderStatus **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QTransOrderStatus & reference is null");
    return ;
  } 
  (arg1)->OnOrderStatus(*arg2);
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransHandler_1OnOrderStatusSwigExplicitJQTransHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  aquila::jqtrans::JQTransHandler *arg1 = (aquila::jqtrans::JQTransHandler *) 0 ;
  QTransOrderStatus *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(aquila::jqtrans::JQTransHandler **)&jarg1; 
  arg2 = *(QTransOrderStatus **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QTransOrderStatus & reference is null");
    return ;
  } 
  (arg1)->aquila::jqtrans::JQTransHandler::OnOrderStatus(*arg2);
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransHandler_1OnTradeStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  aquila::jqtrans::JQTransHandler *arg1 = (aquila::jqtrans::JQTransHandler *) 0 ;
  QTransTradeStatus *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(aquila::jqtrans::JQTransHandler **)&jarg1; 
  arg2 = *(QTransTradeStatus **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QTransTradeStatus & reference is null");
    return ;
  } 
  (arg1)->OnTradeStatus(*arg2);
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransHandler_1OnTradeStatusSwigExplicitJQTransHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  aquila::jqtrans::JQTransHandler *arg1 = (aquila::jqtrans::JQTransHandler *) 0 ;
  QTransTradeStatus *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(aquila::jqtrans::JQTransHandler **)&jarg1; 
  arg2 = *(QTransTradeStatus **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QTransTradeStatus & reference is null");
    return ;
  } 
  (arg1)->aquila::jqtrans::JQTransHandler::OnTradeStatus(*arg2);
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransHandler_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  aquila::jqtrans::JQTransHandler *obj = *((aquila::jqtrans::JQTransHandler **)&objarg);
  (void)jcls;
  SwigDirector_JQTransHandler *director = dynamic_cast<SwigDirector_JQTransHandler *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransHandler_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  aquila::jqtrans::JQTransHandler *obj = *((aquila::jqtrans::JQTransHandler **)&objarg);
  SwigDirector_JQTransHandler *director = dynamic_cast<SwigDirector_JQTransHandler *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_TRANS2QUIK_1DLL_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("TRANS2QUIK.dll");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_CURRENT_1DLL_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("JQTrans.dll");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_replace_1mod(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jstring jresult = 0 ;
  std::string arg1 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = aquila::jqtrans::replace_mod(arg1);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_new_1JQTransServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  aquila::jqtrans::JQTransHandler *arg1 = (aquila::jqtrans::JQTransHandler *) 0 ;
  aquila::jqtrans::JQTransServer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransHandler **)&jarg1; 
  try {
    result = (aquila::jqtrans::JQTransServer *)new aquila::jqtrans::JQTransServer(arg1);
  }
  catch(std::exception &_e) {
    {
      jclass exClass = jenv->FindClass("java/lang/Exception");
      if (exClass)
      jenv->ThrowNew(exClass, (&_e)->what());
      return 0;
    }
  }
  
  *(aquila::jqtrans::JQTransServer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->connect(arg2);
  }
  catch(std::exception &_e) {
    {
      jclass exClass = jenv->FindClass("java/lang/Exception");
      if (exClass)
      jenv->ThrowNew(exClass, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  try {
    (arg1)->disconnect();
  }
  catch(std::exception &_e) {
    {
      jclass exClass = jenv->FindClass("java/lang/Exception");
      if (exClass)
      jenv->ThrowNew(exClass, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1send(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  try {
    (arg1)->send(arg2);
  }
  catch(std::exception &_e) {
    {
      jclass exClass = jenv->FindClass("java/lang/Exception");
      if (exClass)
      jenv->ThrowNew(exClass, (&_e)->what());
      return ;
    }
  }
  
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1isDllConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  result = (bool)(arg1)->isDllConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1isQuikConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  result = (bool)(arg1)->isQuikConnected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getOrderAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getOrderAccount(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getOrderClientCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getOrderClientCode(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getOrderFirmId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getOrderFirmId(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getOrderQty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (unsigned long)(arg1)->getOrderQty(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getOrderDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (unsigned long)(arg1)->getOrderDate(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getOrderTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (unsigned long)(arg1)->getOrderTime(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getOrderActivationTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (unsigned long)(arg1)->getOrderActivationTime(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getOrderWithdrawTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (unsigned long)(arg1)->getOrderWithdrawTime(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getOrderExpiry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (unsigned long)(arg1)->getOrderExpiry(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getOrderAccruedInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getOrderAccruedInt(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getOrderYield(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getOrderYield(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getOrderUid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (unsigned long)(arg1)->getOrderUid(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getOrderUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getOrderUserId(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getOrderBrokerRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getOrderBrokerRef(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (unsigned long)(arg1)->getTradeDate(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeSettleDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (unsigned long)(arg1)->getTradeSettleDate(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  unsigned long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (unsigned long)(arg1)->getTradeTime(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeIsMarginal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->getTradeIsMarginal(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeAccruedInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getTradeAccruedInt(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeYield(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getTradeYield(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeTsCommission(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getTradeTsCommission(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeClearingCenterCommission(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getTradeClearingCenterCommission(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeExchangeCommission(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getTradeExchangeCommission(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeTradingSystemCommission(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getTradeTradingSystemCommission(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradePrice2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getTradePrice2(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeRepoRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getTradeRepoRate(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeRepoValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getTradeRepoValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeRepo2Value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getTradeRepo2Value(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeAccruedInt2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getTradeAccruedInt2(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeRepoTerm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (long)(arg1)->getTradeRepoTerm(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeStartDiscount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getTradeStartDiscount(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeLowerDiscount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getTradeLowerDiscount(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeUpperDiscount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (double)(arg1)->getTradeUpperDiscount(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeBlockSecurities(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (bool)(arg1)->getTradeBlockSecurities(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeCurrency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getTradeCurrency(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeSettleCurrency(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getTradeSettleCurrency(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeSettleCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getTradeSettleCode(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getTradeAccount(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeBrokerRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getTradeBrokerRef(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeClientCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getTradeClientCode(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeUserId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getTradeUserId(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeFirmId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getTradeFirmId(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradePartnerFirmId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getTradePartnerFirmId(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeExchangeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getTradeExchangeCode(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_JQTransServer_1getTradeStationId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  unsigned long arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  arg2 = (unsigned long)jarg2; 
  result = (arg1)->getTradeStationId(arg2);
  // BEG typemap(out) std::string marker
  size_t result_len = (&result)->length();
  wchar_t *result_dst = new wchar_t[result_len];
  MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, (&result)->c_str(), result_len, result_dst, result_len);
  jresult = jenv->NewString((jchar*)result_dst, result_len);
  delete [] result_dst;
  // END typemap(out) std::string marker 
  return jresult;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_delete_1JQTransServer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  aquila::jqtrans::JQTransServer *arg1 = (aquila::jqtrans::JQTransServer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(aquila::jqtrans::JQTransServer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ru_prolib_aquila_JQTrans_JQTransJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[4] = {
    {
      "SwigDirector_JQTransHandler_OnConnectionStatus", "(Lru/prolib/aquila/JQTrans/JQTransHandler;IILjava/lang/String;)V" 
    },
    {
      "SwigDirector_JQTransHandler_OnTransactionReply", "(Lru/prolib/aquila/JQTrans/JQTransHandler;IIIJJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_JQTransHandler_OnOrderStatus", "(Lru/prolib/aquila/JQTrans/JQTransHandler;J)V" 
    },
    {
      "SwigDirector_JQTransHandler_OnTradeStatus", "(Lru/prolib/aquila/JQTrans/JQTransHandler;J)V" 
    }
  };
  Swig::jclass_JQTransJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_JQTransJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

